name: AI x Crypto GitHub Daily Updates

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9 AM UTC
  workflow_dispatch:  # Manual trigger for testing

jobs:
  github-data-updates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install @octokit/rest moment
    
    - name: Fetch GitHub Data and Generate Reports
      run: |
        cat > github_report_generator.js << 'EOF'
        const { Octokit } = require('@octokit/rest');
        const moment = require('moment');
        
        const octokit = new Octokit({
          auth: process.env.GITHUB_TOKEN
        });
        
        const ORGS_TO_MONITOR = [
          { org: 'opentensor', name: 'Bittensor', prefix: 'BITTENSOR' },
          { org: 'Virtual-Protocol', name: 'Virtual Protocol', prefix: 'VIRTUAL PROTOCOL' }, 
          { org: 'nearai', name: 'NEAR AI', prefix: 'NEAR AI' },
          { org: 'near', name: 'NEAR Protocol', prefix: 'NEAR PROTOCOL' }
        ];
        
        const yesterday = moment().subtract(1, 'days').format('YYYY-MM-DD');
        const today = moment().format('DD.MM.YYYY');
        
        function truncateText(text, maxLength) {
          if (text.length <= maxLength) return text;
          return text.substring(0, maxLength - 3) + '...';
        }
        
        async function fetchOrgActivity(orgData) {
          try {
            console.log(`Fetching data for ${orgData.name}...`);
            
            const { data: repos } = await octokit.rest.repos.listForOrg({
              org: orgData.org,
              sort: 'updated',
              per_page: 20
            });
            
            const activities = [];
            
            for (const repo of repos.slice(0, 10)) {
              try {
                // Get recent commits
                const { data: commits } = await octokit.rest.repos.listCommits({
                  owner: orgData.org,
                  repo: repo.name,
                  since: `${yesterday}T00:00:00Z`,
                  per_page: 10
                });
                
                if (commits.length > 0) {
                  activities.push({
                    type: 'commits',
                    repo: repo.name,
                    repoUrl: repo.html_url,
                    org: orgData.name,
                    orgPrefix: orgData.prefix,
                    count: commits.length,
                    commits: commits.slice(0, 5).map(c => ({
                      message: c.commit.message.split('\n')[0],
                      author: c.commit.author.name,
                      sha: c.sha.substring(0, 7),
                      url: c.html_url
                    }))
                  });
                }
                
                // Get recent pull requests
                const { data: pulls } = await octokit.rest.pulls.list({
                  owner: orgData.org,
                  repo: repo.name,
                  state: 'all',
                  sort: 'updated',
                  per_page: 5
                });
                
                const recentPulls = pulls.filter(p => 
                  moment(p.updated_at).isAfter(moment().subtract(1, 'days'))
                );
                
                if (recentPulls.length > 0) {
                  activities.push({
                    type: 'pulls',
                    repo: repo.name,
                    repoUrl: repo.html_url,
                    org: orgData.name,
                    orgPrefix: orgData.prefix,
                    pulls: recentPulls.map(p => ({
                      title: p.title,
                      state: p.state,
                      number: p.number,
                      url: p.html_url,
                      body: p.body
                    }))
                  });
                }
                
                // Get recent releases
                try {
                  const { data: releases } = await octokit.rest.repos.listReleases({
                    owner: orgData.org,
                    repo: repo.name,
                    per_page: 3
                  });
                  
                  const recentReleases = releases.filter(r => 
                    moment(r.published_at).isAfter(moment().subtract(7, 'days'))
                  );
                  
                  if (recentReleases.length > 0) {
                    activities.push({
                      type: 'release',
                      repo: repo.name,
                      repoUrl: repo.html_url,
                      org: orgData.name,
                      orgPrefix: orgData.prefix,
                      release: {
                        name: recentReleases[0].name || recentReleases[0].tag_name,
                        body: recentReleases[0].body,
                        url: recentReleases[0].html_url,
                        published_at: recentReleases[0].published_at
                      }
                    });
                  }
                } catch (e) {
                  // Releases endpoint might not be available
                }
                
                await new Promise(resolve => setTimeout(resolve, 100));
                
              } catch (repoError) {
                console.log(`Error fetching ${repo.name}: ${repoError.message}`);
              }
            }
            
            return activities;
            
          } catch (error) {
            console.error(`Error fetching ${orgData.name}:`, error.message);
            return [];
          }
        }
        
        function generateTelegramReport(allActivities) {
          const title = `AI x CRYPTO GITHUB UPDATES [${today}] 📟\\n\\nWhat shipped on GitHub today? Here's the latest from the AI x Crypto devs!\\n\\n`;
          
          let content = '';
          let itemCount = 1;
          
          const sortedActivities = allActivities
            .filter(activity => activity.length > 0)
            .flat()
            .sort((a, b) => {
              const priority = { release: 3, pulls: 2, commits: 1 };
              return priority[b.type] - priority[a.type];
            })
            .slice(0, 8);
          
          sortedActivities.forEach(activity => {
            if (activity.type === 'release') {
              content += `**${itemCount}/ NEW RELEASE** - [${activity.repo}](${activity.repoUrl})\\n\\n`;
              content += `**What changed:**\\n\\n`;
              
              if (activity.release.body) {
                const releaseNotes = activity.release.body
                  .split('\\n')
                  .filter(line => line.trim() && !line.startsWith('#'))
                  .slice(0, 4)
                  .map(line => `• ${line.replace(/^[-*]\\s*/, '').trim()}`)
                  .join('\\n');
                content += `${releaseNotes}\\n\\n`;
              } else {
                content += `• Released ${activity.release.name}\\n\\n`;
              }
              
              content += `**Why it matters:**\\n\\n`;
              content += `This [release](${activity.release.url}) brings important updates to the ${activity.org} ecosystem with enhanced functionality and improved developer experience.\\n\\n`;
              
            } else if (activity.type === 'pulls') {
              const mergedPulls = activity.pulls.filter(p => p.state === 'closed');
              const openPulls = activity.pulls.filter(p => p.state === 'open');
              
              if (mergedPulls.length > 0) {
                content += `**${itemCount}/ PULL REQUESTS MERGED** - [${activity.repo}](${activity.repoUrl})\\n\\n`;
                content += `**What changed:**\\n\\n`;
                mergedPulls.slice(0, 4).forEach(pull => {
                  content += `• ${truncateText(pull.title, 100)}\\n`;
                });
                content += `\\n**Why it matters:**\\n\\n`;
                content += `These merged [pull requests](${mergedPulls[0].url}) enhance ${activity.repo} functionality and continue active development in the ${activity.org} ecosystem.\\n\\n`;
              } else if (openPulls.length > 0) {
                content += `**${itemCount}/ ACTIVE PULL REQUESTS** - [${activity.repo}](${activity.repoUrl})\\n\\n`;
                content += `**What's being worked on:**\\n\\n`;
                openPulls.slice(0, 4).forEach(pull => {
                  content += `• ${truncateText(pull.title, 100)}\\n`;
                });
                content += `\\n**Why it matters:**\\n\\n`;
                content += `Active development continues with ${openPulls.length} [pull requests](${openPulls[0].url}) under review in the ${activity.org} ecosystem.\\n\\n`;
              }
              
            } else if (activity.type === 'commits') {
              content += `**${itemCount}/ DEVELOPMENT ACTIVITY** - [${activity.repo}](${activity.repoUrl})\\n\\n`;
              content += `**What changed:**\\n\\n`;
              activity.commits.slice(0, 4).forEach(commit => {
                content += `• ${truncateText(commit.message, 80)} ([${commit.sha}](${commit.url}))\\n`;
              });
              content += `\\n**Why it matters:**\\n\\n`;
              content += `Active development continues with ${activity.count} commits pushing forward ${activity.org} development.\\n\\n`;
            }
            
            itemCount++;
          });
          
          if (content === '') {
            content = 'No significant GitHub activity detected in the past 24 hours for monitored AI x Crypto repositories.\\n\\n';
            content += `Check out the full repos: [Bittensor](https://github.com/opentensor), [Virtual Protocol](https://github.com/Virtual-Protocol), [NEAR AI](https://github.com/nearai), [NEAR Protocol](https://github.com/near)\\n\\n`;
          }
          
          return title + content;
        }
        
        function generateTwitterReport(allActivities) {
          const sortedActivities = allActivities
            .filter(activity => activity.length > 0)
            .flat()
            .sort((a, b) => {
              const priority = { release: 3, pulls: 2, commits: 1 };
              return priority[b.type] - priority[a.type];
            })
            .slice(0, 6);
          
          if (sortedActivities.length === 0) {
            return `AI x CRYPTO GITHUB UPDATES [${today}] 📟\\n\\nWhat shipped on the @opentensor @Virtual_Prot @nearai @nearprotocol GitHub today? Here's the latest from the AI x Crypto devs!\\n\\nNo major GitHub activity in monitored repos today.\\n\\nCheck out the repos:\\nhttps://github.com/opentensor\\nhttps://github.com/Virtual-Protocol\\nhttps://github.com/nearai\\nhttps://github.com/near\\n\\n#AI #Crypto #GitHub #Development`;
          }
          
          let content = `AI x CRYPTO GITHUB UPDATES [${today}] 📟\\n\\nWhat shipped on the @opentensor @Virtual_Prot @nearai @nearprotocol GitHub today? Here's the latest from the AI x Crypto devs!\\n\\n`;
          
          let threadNumber = 1;
          
          sortedActivities.forEach(activity => {
            content += `${threadNumber}/\\n`;
            
            if (activity.type === 'release') {
              content += `${activity.orgPrefix} NEW RELEASE - ${activity.repo}\\n\\n`;
              content += `What changed:\\n\\n`;
              
              if (activity.release.body) {
                const releaseNotes = activity.release.body
                  .split('\\n')
                  .filter(line => line.trim() && !line.startsWith('#'))
                  .slice(0, 3)
                  .map(line => `• ${line.replace(/^[-*]\\s*/, '').trim()}`)
                  .join('\\n');
                content += `${releaseNotes}\\n\\n`;
              } else {
                content += `• Released ${activity.release.name}\\n\\n`;
              }
              
              content += `Why it matters:\\n\\nThis release brings important updates to the ${activity.org} ecosystem.\\n\\n`;
              content += `🔗 ${activity.release.url}\\n`;
              content += `📁 ${activity.repoUrl}\\n\\n`;
              
            } else if (activity.type === 'pulls') {
              const mergedPulls = activity.pulls.filter(p => p.state === 'closed');
              
              if (mergedPulls.length > 0) {
                content += `${activity.orgPrefix} PULL REQUESTS MERGED - ${activity.repo}\\n\\n`;
                content += `What changed:\\n\\n`;
                mergedPulls.slice(0, 3).forEach(pull => {
                  content += `• ${truncateText(pull.title, 60)}\\n`;
                });
                content += `\\nWhy it matters:\\n\\nThese PRs enhance ${activity.repo} functionality.\\n\\n`;
                content += `🔗 ${mergedPulls[0].url}\\n`;
                content += `📁 ${activity.repoUrl}\\n\\n`;
              }
              
            } else if (activity.type === 'commits') {
              content += `${activity.orgPrefix} DEVELOPMENT ACTIVITY - ${activity.repo}\\n\\n`;
              content += `What changed:\\n\\n`;
              activity.commits.slice(0, 3).forEach(commit => {
                content += `• ${truncateText(commit.message, 50)}\\n`;
              });
              content += `\\nWhy it matters:\\n\\n${activity.count} commits advancing ${activity.org} development.\\n\\n`;
              content += `🔗 ${activity.commits[0].url}\\n`;
              content += `📁 ${activity.repoUrl}\\n\\n`;
            }
            
            threadNumber++;
          });
          
          content += `Check out all the repos:\\n`;
          content += `https://github.com/opentensor\\n`;
          content += `https://github.com/Virtual-Protocol\\n`;
          content += `https://github.com/nearai\\n`;
          content += `https://github.com/near\\n\\n`;
          content += `#AI #Crypto #GitHub #Development`;
          
          return content;
        }
        
        async function main() {
          console.log('🚀 Starting GitHub data collection...');
          
          try {
            const allActivities = [];
            
            for (const org of ORGS_TO_MONITOR) {
              const activities = await fetchOrgActivity(org);
              allActivities.push(activities);
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            console.log('📊 Generating reports...');
            
            const telegramReport = generateTelegramReport(allActivities);
            const twitterReport = generateTwitterReport(allActivities);
            
            const fs = require('fs');
            fs.writeFileSync('telegram_report.txt', telegramReport);
            fs.writeFileSync('twitter_report.txt', twitterReport);
            
            console.log('✅ Reports generated successfully!');
            
          } catch (error) {
            console.error('❌ Error generating reports:', error);
            process.exit(1);
          }
        }
        
        main();
        EOF
        
        node github_report_generator.js
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Read Generated Reports
      id: reports
      run: |
        TELEGRAM_CONTENT=$(cat telegram_report.txt)
        TWITTER_CONTENT=$(cat twitter_report.txt)
        
        echo "TELEGRAM_CONTENT<<EOF" >> $GITHUB_OUTPUT
        echo "$TELEGRAM_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "TWITTER_CONTENT<<EOF" >> $GITHUB_OUTPUT
        echo "$TWITTER_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
    
    - name: Send to Telegram
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "-1001559796949",
            "text": ${{ toJson(steps.reports.outputs.TELEGRAM_CONTENT) }},
            "parse_mode": "Markdown",
            "disable_web_page_preview": false
          }'
    
    - name: Send to X via Zapier
      run: |
        curl -X POST "${{ secrets.ZAPIER_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "text": ${{ toJson(steps.reports.outputs.TWITTER_CONTENT) }},
            "source": "github-data-automation",
            "platform": "twitter",
            "method": "share_now"
          }'
    
    - name: Success notification
      if: success()
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "-1001559796949",
            "text": "✅ **GitHub Reports with Inline URLs Sent!**\n\n📱 Telegram: ✅ Posted\n🐦 X/Twitter: ✅ Posted\n📅 Date: ${{ steps.reports.outputs.DATE }}\n🔗 URLs embedded inline\n⏰ Next: Tomorrow 9 AM UTC",
            "parse_mode": "Markdown"
          }'